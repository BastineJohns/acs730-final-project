name: Terraform CI

on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - "*"

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Determine Environment
        id: getenv
        run: |
          if [[ "$GITHUB_REF" == refs/heads/* ]]; then
            branch="${GITHUB_REF#refs/heads/}"
          else
            branch="dev"
          fi
          # Map branch names to environment directories
          case $branch in
            main) env_dir="prod" ;;
            *) env_dir="$branch" ;;
          esac
          echo "env_dir=terraform/$env_dir" >> $GITHUB_OUTPUT

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v2
        with:
          tflint_version: v0.47.0

      - name: Terraform Init
        run: |
          echo "Using environment directory: ${{ steps.getenv.outputs.env_dir }}"
          terraform -chdir="${{ steps.getenv.outputs.env_dir }}" init \
            -backend-config="bucket=your-tfstate-bucket" \
            -backend-config="key=${{ steps.getenv.outputs.env_dir }}/terraform.tfstate"

      - name: Terraform Validate
        run: terraform -chdir="${{ steps.getenv.outputs.env_dir }}" validate

      - name: Terraform Plan
        run: terraform -chdir="${{ steps.getenv.outputs.env_dir }}" plan

  ansible:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      # If you need AWS credentials as well, ensure theyâ€™re set as secrets.
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install Python Dependencies and Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible boto3 botocore

      - name: Setup SSH Private Key
        run: |
          mkdir -p $HOME/.ssh
          echo "${{ secrets.SSH_KEY }}" > $HOME/.ssh/id_rsa
          chmod 600 $HOME/.ssh/id_rsa

      - name: Verify Installed Versions
        run: |
          ansible --version
          python --version
          pip --version

      - name: Test Dynamic Inventory Parsing
        run: |
          # This lists the inventory generated by the aws_ec2 plugin.
          ansible-inventory --list -i ansible/aws_ec2.yaml
        continue-on-error: true

      - name: Run Ansible Playbook
        run: |
          cd ansible
          # Ensure that your dynamic inventory file (aws_ec2.yaml) is in the same ansible folder.
          ansible-playbook -i aws_ec2.yaml webserver-setup.yml --private-key $HOME/.ssh/id_rsa -u ec2-user || true